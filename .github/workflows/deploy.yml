name: Deploy

on:
  push:
    branches:
    - main
    - feature/deploy-to-cloud
  workflow_dispatch:

jobs:
  spin:
    runs-on: ubuntu-22.04
    name: Build application
    env:
      tinygo-dev-image-tag: sha-8b9bee4cad5693105c1ee268ea29e5d3f8cb5408
    steps:
      - uses: actions/checkout@v3

      - name: Setup rust
        uses: dtolnay/rust-toolchain@stable
        with:
            targets: wasm32-wasi
            components: clippy, rustfmt

      - name: Setup Go
        uses: actions/setup-go@v4.0.0
        with:
          go-version-file: 'api/post/go.mod'
          cache-dependency-path: 'api/post/go.sum'

      - name: Cache tinygo
        id: cache-tinygo
        uses: actions/cache@v3
        env:
          cache-name: cache-tinygo
        with:
          path: ${{ github.workspace }}/tinygo
          key: tinygo-dev-${{ env.tinygo-dev-image-tag }}

      # download tinygo from dev docker container to use new 'reflect' and 'encoding/json' features
      - name: Download tinygo
        if: ${{ steps.cache-tinygo.outputs.cache-hit != 'true' }}
        env:
          IMAGE_TAG: ghcr.io/tinygo-org/tinygo-dev:${{ env.tinygo-dev-image-tag }}
        run: |
          # download tinygo from 'dev' branch docker container
          docker pull ${IMAGE_TAG}
          CONTAINER=$(docker create --platform=linux/amd64 ${IMAGE_TAG})
          docker cp ${CONTAINER}:/tinygo/ $GITHUB_WORKSPACE
          docker rm -v ${CONTAINER}

      - name: Setup tinygo
        run: |
          # set the tinygo root path
          echo "TINYGOROOT=$GITHUB_WORKSPACE/tinygo" >> $GITHUB_ENV
          # add tinygo to gopath
          GOPATH=$(go env GOPATH)
          cp $GITHUB_WORKSPACE/tinygo/build/* $(go env GOPATH)/bin
          # debug home paths
          ls -al $GITHUB_WORKSPACE
          env

      - name: Setup Node.js
        uses: actions/setup-node@v2.5.2
        with:
          node-version: '>=18.13.0'
          cache-dependency-path: web/package-lock.json

      - name: Setup spin
        uses: fermyon/actions/spin/setup@v1
        with:
          version: canary

      - name: Install Dependencies & Configure
        env:
          AUTH_DOMAIN: ${{ vars.AUTH_DOMAIN }}
          AUTH_AUDIENCE: ${{ vars.AUTH_AUDIENCE }}
          AUTH_CLIENT_ID: ${{ vars.AUTH_CLIENT_ID }}
        run: |
          cd web
          npm install
          cat << EOF > .env.production.local
          VITE_AUTH0_DOMAIN = "$AUTH_DOMAIN"
          VITE_AUTH0_AUDIENCE ="$AUTH_AUDIENCE"
          VITE_AUTH0_CLIENT_ID = "$AUTH_CLIENT_ID"
          EOF
          cd -

      - name: Build & Deploy
        run: |
          spin login --token ${{ secrets.FERMYON_CLOUD_TOKEN }}
          spin build
          spin deploy \
            --key-value "db_url=${{ secrets.PGCONNSTR }}" \
            --key-value "auth_domain=${{ vars.AUTH_DOMAIN }}" \
            --key-value "auth_audience=${{ vars.AUTH_AUDIENCE }}"
